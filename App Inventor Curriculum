MiT AI2 CURRICULUM

                                            CURRICULUM GUIDELINES

                       1.) Class Problem Sets and Problem sets should be reviewed and explained
                       2.) Properties of Components should be shown and explained in the block mode
                       3.) At the end of each class all class problem sets should be solved and shown in the emulator mode by the instructor

                                    MODULE 1: INTRODUCTION, SETUP AND COMPONENTS


Class 1: INTRODUCTION TO COMPUTER SCIENCE AND PROGRAMMING (BASIC)
- What is Computer Science?
- What is the science component of Computer Science?
- Origins of Computer Science
- Applications of Computer Science
- Programming(Introduction)
- Programming Languages
- Introduction to App Inventor
- Downloading App Inventor to the PCs

Class 2: MORE ON APP INVENTOR (BASIC)
- Hello World App
- Testing the Hello World App with: 1.)The Emulator
                                   2.)USB
                                   3.)Sending the apk file to an android device
- Event-Driven programming and MiT AI2
- Examples of Event-Driven Programming in MiT AI2( When(button.click),When(screen.initialize) etc...)
- Introducing some components of MiT AI2
- Class Problem Set 1: Text to Speech
- Problem Set 1: Make a speech to text App

Class 3: VARIABLES, LISTS AND TINY DB (BASIC)
- What is a Variable?
- Types of Variables
- Variables in App Inventor
- Lists (INTERMEDIATE)
- Components of a List(elments, index etc..)
- Class Problem Set 2: Using a variable and a list, create an app that adds and gets data.
- What is a Database?(also types of database)
- Databases in App Inventor and Tiny DB
- Class Problem Set 3: Using TinyDB transfer information entered on one screen's textbox to two other screens. 

                               

                                    MODULE 2: CONDITIONAL STATEMENTS AND LOOPS


Class 4: IF STATEMENTS (BASIC)
- What are if statement?
- IF and ELSE IF staements(blocks) in app inventor
- Notifier
- Class Problem Set 4: Form validation (making an app that checks if an email textbox contains @ and notifies if it doesn't) 
- Boolean Logic
- Class Problem Set 5: Advanced Form Validation 
  (making an app that checks if an email textbox contains @ AND if the password textbox is more than 8 characters long and notifies if it doesn't)

Class 5: MORE ON CONDITIONALS (BASIC)
- Class Problem Set 6: Make a calculator
- Class Problem Set 7: Edit your calculator to make sure it detects invalid inputs
- Class Problem Set 8: Using the checkbox component and conditionals make radio buttons

Class 6: LOOPS (BASIC)
- What are loops?
- The role of loops in the early stages of computer science
- Class Problem Set 9: Make an app that prints hello world 50 times
- Class Problem Set 10: Make an app that prints all the numbers from 1-100 (including 1 and 100) (in ascending order)
- Problem Set 2: Make an app that prints all the numbers from 1-100 (including 1 and 100) (in descending order) (INTERMEDIATE)

Class 7: MORE ON LOOPS (INTERMEDIATE)
- Class Problem Set 11: Make an app that multiplies numbers using the add operator
- Class Problem Set 12: Make an app that divides numbers using the subtract operator (If they don't finish on time this will be Problem Set 3) (ADVANCED)

Class 8: LOOP NESTING (ADVANCED)
- Class Problem Set 13: Make an app that calculates exponents (Eg. X to the power of Y) using the add operator



                                MODULE 3: UI AND UX


Class 9: INTRODUCTION TO UI AND UX (BASIC)
- What is UX?
- Components of UX
- UI
- Examples of apps with a good UI and a bad UI
- What makes a good UI?
- Google's Material Standards
- Apple's Human Interface Guidelines
- Common UX components for mobile apps (Hamburger Menu, Tabs, Navigation Bar, etc..)

Class 10: UX/UI ELEMENTS IN APP INVENTOR (BASIC)
- Layouts in App Inventor
- Class Problem Set 14: Make a Navigation Bar with a hamburger icon button (use a material icon) and a label
- Class Problem Set 15: Make key pad for your calculator using layout components (We later explain that table arrangement was the best option for the task)

Class 11: HAMNBURGER MENU (BASIC)
- Drawer Navigation in App Inventor
- Drawer Navigation design tips
- Class Problem Set 16: Make a Drawer Navigation linked to atleast three screens
- Class Problem Set 17: Edit your Drawer Navigation to adhere to Google's Material Standards

Class 12: TABS AND DROPDOWNS (INTERMEDIATE)
- What are Tabs? 
- Tab design tips
- Class Problem Set 18: Make 3 tabs with an indicator
- What are Dropdowns?
- Dropdowns in app inventor(& tips)
- Class Problem Set 19: Make two dropdowns


                            MODULE 4: PROJECTS

Class 13: DOODLE PROJECTS (BASIC)
- Canvas in MiT AI2
- Class Problem Set 20: Make a basic doodle app
- Camera Component
- Class Problem Set 21: Edit your doodle appp to enable the users to change the canvas (using the camera component)
- Class Problem Set 22: Edit your app to enable users to change the color of the line
- Problem Set 3: Edit your app to enable users to adjust the line width

Class 14: BALL BOUNCE PROJECTS (BASIC)
- Ball and its properties
- Class Problem Set 23: Make a ball bounce app
- Sound & Spinner
- Class Problem Set 24: Edit your app so that when the ball reaches an edge it changes color and makes a sound. 
- Problem Set 4: Enable users to change the canvas and ball color by using spinners

Class 15: EQUATION PROJECTS (INTERMEDIATE)
- Revision on Linear Equations
- Class Problem Set 25: Make a linear equation solver
- Point Slope Formula is given
- Class Problem Set 26: Make a slope finder
- Problem Set 5: Make an app that finds the linear equation of two points(ADVANCED)


                         MODULE 5: BUILD YOUR OWN QUIZ APP


EXPECTATIONS OF STUDENTS' QUIZ APP (Instructor is expected to tell the students)
- Should use material and custom icons ONLY
- Should have atleast 5 screens
- Should have a login page 
- Should have a drawer navigation with the following: - Multiple Choice Questions
                                                      - True or False Questions
                                                      - Fill in the blanks Questions
- Should have a navigation bar with a material hamburger icon and a label that describes the app
- A student should prepare atleast 15 multiple choice questions with 2 screens
- For the multiple choice questions the students must use custom radio buttons (using the checkbox component)
- The Multiple Choice Quiz should have a finish quiz which upon clicking will calculate and report the score of the user on the screen
- A student should prepare atleast 3 True/False questions and is advised to use spinners
- The True/False Quiz should have a finish quiz button that immediately reports the score of the user
- The fill in the blank quiz should have atleast 3 questions and a finish quiz button
- The button should display the users score upon click
